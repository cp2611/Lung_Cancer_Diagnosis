# -*- coding: utf-8 -*-
"""sreamlit_lung_cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sw0GW4h_1IuuPM8Mgbgl4UjMRFJfeceW
"""
import numpy as np
import streamlit as st
import pickle
import torch
import torchvision
import torch.nn as nn
from torchvision import transforms
 
import cv2
from PIL import Image,ImageOps
import dill as dill
sm=torch.nn.Softmax()

st.write("""
# Malignant Tumor Prediction from X-Ray image for Lung Cancer Diagnosis
Malignant tumors are **cancerous**. The cells can grow and spread to other parts of the body.

## This app doesn't detect benign tumor as they are not cancerous. It considers benign as normal
### JSRT Dataset is used in this web application
 """)

st.sidebar.header('User Input image')

img = cv2.imread(r'H:/Internship_2_Xen.ai/Lung_cancer/data/images/images/JPCLN009.png',0)  
img=Image.fromarray(img)

st.sidebar.markdown("""
[Sample image](img)""")

uploaded_file=st.sidebar.file_uploader("Upload your Chest X_ray image", type = ["png"])
#uploaded_image = Image.open(uploaded_file)
transformations_new=transforms.Compose([
    transforms.Resize(255),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=torch.tensor(0.5950) , std=torch.tensor(0.2735))
])
if uploaded_file is not None:
  uploaded_image=ImageOps.grayscale(Image.open(uploaded_file))
  input_new=  transformations_new(uploaded_image)
  input_new=input_new.unsqueeze(0)
  input_image=transforms.Resize(255)(uploaded_image)
else :
  input_image=transforms.Resize(255)(img)
  input_new=transforms.CenterCrop(224)(transforms.ToTensor()(input_image))
  input_new=input_new.unsqueeze(0)

if uploaded_file is not None:
  st.image(input_image,channel='BGR')
else:
    st.write('Awaiting X_ray image to be uploaded. Currently using sample X_Ray image (shown below).')
    st.image(input_image)

class LeNet_for_1channel(nn.Module):
  def __init__(self):
    super(LeNet_for_1channel,self).__init__()
    self.cnn_model = nn.Sequential(
        nn.Conv2d(1,6,5,padding=(1,1),stride=(4,4)), # (40,1,244,244)-->(40,6,60,60)
        nn.Tanh(),
        nn.AvgPool2d(2,stride=2), # (40,6,60,60) --> (20,6,30,30)
        nn.Conv2d(6,16,3,padding=(1,1),stride=(2,2)), # (20,6,30,30) --> (20,16,14,14)
        nn.Tanh(),
        nn.AvgPool2d(2,stride=2) # (20,16,14,14) -->  (20,16,7,7) 
    )
    self.fc_model = nn.Sequential(
        nn.Linear(784,120),
        nn.Tanh(),
        nn.Linear(120,84),
        nn.Tanh(),
        nn.Linear(84,2),
        nn.Softmax()
    )
  def forward(self,x):
    x=self.cnn_model(x)
    x=x.view(x.size(0),-1)
    x=self.fc_model(x)
    return x
load_model= LeNet_for_1channel()

output = load_model.load_state_dict(torch.load("new_LeNet_with_softmax.pt",map_location=torch.device('cpu')))
output=load_model(input_new)

malignant_probability=torch.transpose(output.data, 0,1)[1].cpu().numpy()

st.subheader('Predicted Malignant Probability')
st.write(np.around(malignant_probability[0]*100,2),'%')

